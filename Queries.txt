//offers view
create view view_offers
as
select o.oid,o.storeid,s.storename, o.discount, o.discounton, o.termsandcondition, o.totalcoupons, o.offerimg, o.sDate, o.eDate,
o.timedate, o.offerstatus, o.redeemed
from storedetails s, offers o
where o.storeid = s.storeid

//offers sp
DELIMITER $$
CREATE PROCEDURE `offers`(
        IN _storeid VARCHAR(100),
        IN _discount VARCHAR(10),
        IN _discounton VARCHAR(400),
        IN _totalcoupons int(10),
        IN _sDate VARCHAR(100),
        IN _eDate VARCHAR(100),
        IN _tc VARCHAR(2000),
        IN _photo varchar(500),
        IN _q varchar(50),
        INOUT _oid INT(10)
    )
BEGIN
declare temp int(10);
start transaction;

if(_q='1') then
insert into offers(storeid, discount, discounton, totalcoupons, sDate, eDate, termsandcondition)
values(_storeid, _discount, _discounton, _totalcoupons, _sDate, _eDate, _tc);

select oid into temp from offers where oid=(select max(oid) from offers);
set _oid=temp;
end if;

if(_q='2') then
update offers set discount=_discount, discounton=_discounton, termsandcondition=_tc, sDate=_sDate, eDate=_eDate where oid=_oid;
set _oid=1;
end if;

if(_q='3') then
update offers set offerimg=_photo where oid=_oid;
set _oid=1;
end if;
commit;

END
$$

// sp on claimed offers
DELIMITER $$

DROP PROCEDURE IF EXISTS `sp_coupon` $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_coupon`(
        IN _storeid VARCHAR(100),
        IN _email varchar(100),
        IN _coupon varchar(45),
        IN _q varchar(50),
        IN _oid INT(10),
        INOUT _cid INT(10)
    )
BEGIN
declare _temp varchar(45);
start transaction;

if(_q='1') then

IF (SELECT count(*) FROM claimedoffers where uid=_email and oid=_oid)>0 THEN

    select coupon into _temp from claimedoffers where uid=_email and oid=_oid;
      if(_temp=null) then
            begin
        UPDATE claimedoffers SET coupon=_coupon and claimdate=current_timestamp where uid=_email and oid=_oid;
        set _cid=1;
          end;
          else
            begin
            set _cid=2;
            end;
          end if;

ELSE
        BEGIN

            INSERT INTO claimedoffers(oid, storeid, uid, coupon, claimdate) VALUES (_oid, _storeid, _email, _coupon, current_timestamp);
            set _cid=1;

        END;
end if;
end if;

if(_q='2') then
IF (SELECT count(*) FROM claimedoffers where uid=_email and oid=_oid)>0 THEN
        BEGIN
        UPDATE claimedoffers SET fav= fav xor 1 where uid=_email and oid=_oid;
        END;
        ELSE
        BEGIN
        INSERT INTO claimedoffers(oid, storeid, uid, coupon) VALUES (_oid, _storeid, _email, 'NA');
        UPDATE claimedoffers SET fav= fav xor 1 where uid=_email and oid=_oid;
        END;
        END IF;
set _cid=1;
end if;

if(_q='3') then
update claimedoffers set couponstatus='Redeemed', redeemdate=current_timestamp where uid=_email and oid=_oid;
set _cid=1;
end if;

if(_q='4') then
select * from claimedoffers where cid=_cid;
end if;

if(_q='5') then
delete from claimedoffers where cid=_cid;
end if;

if(_q='6') then
update claimedoffers set couponstatus='Expired', redeemdate=current_timestamp where uid=_email and oid=_oid;
end if;
commit;

END $$

DELIMITER ;
//


//sp_advertise
DELIMITER $$

DROP PROCEDURE IF EXISTS `sp_adv` $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_adv`(
        IN _storeid VARCHAR(100),
        IN _advtitle VARCHAR(500),
        IN _advdesc VARCHAR(2000),
        IN _sDate VARCHAR(45),
        IN _eDate VARCHAR(45),
        IN _advtc VARCHAR(5000),
        IN _photo varchar(45),
        IN _q varchar(50),
        INOUT _aid INT(10)
    )
BEGIN
declare temp int(10);
start transaction;

if(_q='1') then
insert into advertise(storeid, advtitle, advdesc, sDate, eDate, advtc)
values(_storeid, _advtitle, _advdesc, _sDate, _eDate, _advtc);

select aid into temp from advertise where aid=(select max(aid) from advertise);
set _aid=temp;
end if;

if(_q='2') then
update advertise set advdesc=_advdesc, advtitle=_advtitle, advtc=_advtc, sDate=_sDate, eDate=_eDate where aid=_aid;
set _aid=1;
end if;

if(_q='3') then
update advertise set advimg=_photo where aid=_aid;
set _aid=1;
end if;
commit;
END $$

DELIMITER ;
//



DROP TABLE IF EXISTS `shejari`.`claimedoffers`;
CREATE TABLE  `shejari`.`claimedoffers` (
  `cid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `uid` varchar(100) NOT NULL,
  `oid` int(10) unsigned NOT NULL,
  `couponstatus` varchar(45) NOT NULL DEFAULT 'Unused',
  `claimdate` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `redeemdate` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `fav` int(5) unsigned NOT NULL DEFAULT '0',
  `coupon` varchar(45) NOT NULL,
  PRIMARY KEY (`cid`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;


// trigger for increasing store count and category count in counter table

delimiter $$
CREATE TRIGGER tgr_incStoreAndCategory
after insert ON storedetails
for each row
BEGIN
UPDATE log_counters SET categories = (select count(distinct(category)) as total from storedetails), stores=stores+1 where counterid = 1;
END;
$$

// trigger for increasing user count in counter table

delimiter $$
CREATE TRIGGER tgr_incUser
after insert ON users
for each row
BEGIN
UPDATE log_counters SET members = members+1 where counterid = 1;
END;
$$

//sp_users for user login and user registration

DELIMITER $$

DROP PROCEDURE IF EXISTS `sp_user` $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_user`(
        IN _email VARCHAR(100),
        IN _fnm VARCHAR(45),
        IN _lnm VARCHAR(45),
        IN _pass VARCHAR(45),
        IN _newsFrom VARCHAR(500),
        IN _q VARCHAR(10),
        INOUT _flag INT(10)
    )
BEGIN
start transaction;

if(_q='1') then
  begin
  if(select count(email) from users where email=_email)>0 then
    set _flag=2;
  else
    insert into users(email, fnm, lnm, pass) values(_email, _fnm, _lnm, _pass);
    set _flag=1;
  end if;
  end;
end if;

if(_q='2') then
select * from users where email=_email and pass=_pass;
set _flag=1;
end if;

if(_q='3') then
update users set fnm=_fnm, lnm=_lnm, pass=_pass, newsfrom=_newsFrom where email=_email;
set _flag=1;
end if;
commit;
END $$

DELIMITER ;

// sp_halls 
DELIMITER $$
DROP PROCEDURE IF EXISTS `sp_hall` $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_hall`(
        IN _hallName VARCHAR(500),
        IN _hallNameHindi VARCHAR(500),
        IN _hallAreaSqft int(10),
        IN _hallArea VARCHAR(200),
        IN _address VARCHAR(3000),
        IN _contact VARCHAR(45),
        IN _url varchar(200),
        IN _email varchar(45),
        IN _services varchar(5000),
        IN _mapLocation varchar(100),
        IN _city varchar(200),
        IN _subType varchar(45),
        IN _addedBy varchar(45),
        IN _photo varchar(100),
        INOUT _hid INT(10),
        IN _q varchar(50)
    )
BEGIN
declare temp int(10);
start transaction;

if(_q='1') then
insert into halls(hallid, hallname, hallnamehindi, areasqft, fulladdress, contact, services, maplocation, email, substype, addedBy,
hall_area, websiteurl,city)
values(_hid, _hallName, _hallNameHindi, _hallAreaSqft, _address, _contact, _services, _mapLocation, _email, _subType, _addedBy,
_hallArea, _url, _city);

select hallid into temp from halls where hallid=(select max(hallid) from halls);
set _hid=temp;
end if;

if(_q='2') then
update halls set hallname=_hallName, hallnamehindi=_hallNameHindi, areasqft=_hallAreaSqft, fulladdress=_address, contact=_contact,
services=_services,maplocation=_mapLocation, email=_email, substype=_subType, hall_area=_hallArea, websiteurl=_url, city=_city where hallid=_hid;
set _hid=1;
end if;

if(_q='3') then
update halls set photo=_photo where hallid=_hid;
set _hid=1;
end if;

if(_q='4') then
delete from halls where hallid=_hid;
set _hid=1;
end if;
commit;
END $$

DELIMITER ;

//sp_mes

DELIMITER $$

DROP PROCEDURE IF EXISTS `sp_mes` $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_mes`(
        IN _mesname VARCHAR(1000),
        IN _mesnamehindi VARCHAR(1000),
        IN _contact VARCHAR(45),
        IN _address VARCHAR(5000),
        IN _mesarea VARCHAR(100),
        IN _services VARCHAR(3000),
        IN _serviceArea VARCHAR(100),
        IN _email VARCHAR(45),
        IN _websiteurl VARCHAR(45),
        IN _homedelivery VARCHAR(45),
        IN _lunchtime varchar(45),
        IN _dinnertime varchar(45),
        IN _messtatus varchar(45),
        IN _maplocation varchar(45),
        IN _subtype varchar(45),
        IN _closedon varchar(45),
        IN _city varchar(45),
        IN _addedby varchar(45),
        IN _photo varchar(1000),
        INOUT _mesid INT(10),
        IN _q varchar(50)
    )
BEGIN
declare temp int(10);
start transaction;

if(_q='1') then
insert into mes(mesname, mesnamehindi, contact, address, mesarea, services, servicearea, email, websiteurl, homedelivery, lunchtime, dinnertime,
maplocation, subtype, closedon, city, addedby)
values(_mesname, _mesnamehindi, _contact, _address, _mesarea, _services, _servicearea, _email, _websiteurl, _homedelivery, _lunchtime, _dinnertime,
_maplocation, _subtype, _closedon, _city, _addedby);

select mesid into temp from mes where mesid=(select max(mesid) from mes);
set _mesid=temp;
end if;

if(_q='2') then
update mes set mesname=_mesname, mesnamehindi=_mesnamehindi, contact=_contact, address=_address, mesarea=_mesarea, services=_services,
servicearea=_servicearea,email=_email,
websiteurl=_websiteurl, homedelivery=_homedelivery, lunchtime=_lunchtime,dinnertime=_dinnertime,closedon=_closedon,
city=_city where mesid=_mesid;
set _mesid=1;
end if;

if(_q='3') then
update mes set photo=_photo where mesid=_mesid;
set _mesid=1;
end if;

if(_q='4') then
update mes set messtatus=_messtatus where mesid=_mesid;
set _mesid=1;
end if;

if(_q='5') then
update mes set maplocation=_maplocation where mesid=_mesid;
set _mesid=1;
end if;

commit;
END $$

DELIMITER ;

// sp_hostel
DELIMITER $$

DROP PROCEDURE IF EXISTS `sp_hostel` $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_hostel`(
        IN _hostName VARCHAR(500),
        IN _hostNameHindi VARCHAR(500),
        IN _hostAreaSqft int(45),
        IN _hostArea VARCHAR(100),
        IN _address VARCHAR(5000),
        IN _contact VARCHAR(45),
        IN _url varchar(100),
        IN _email varchar(45),
        IN _forwhom varchar(45),
        IN _amenities varchar(5000),
        IN _bedrooms varchar(45),
        IN _beds varchar(45),
        IN _rent varchar(10),
        IN _deposit varchar(10),
        IN _desc varchar(5000),
        IN _mapLocation varchar(45),
        IN _city varchar(45),
        IN _addedBy varchar(200),
        IN _photo varchar(100),
        IN _furnished varchar(45),
        IN _possession varchar(45),
        INOUT _hostid INT(10),
        IN _q varchar(50)
    )
BEGIN
declare temp int(10);
start transaction;

if(_q='1') then
insert into hostel(hostname, hostnamehindi, hostarea, hostareasqft, address, contact, websiteurl, email, forwhom,
amenities, bedrooms, beds, rent, deposit, description, maplocation, city, addedby, furnished, possession)
values(_hostName, _hostNameHindi, _hostArea, _hostAreaSqft, _address, _contact, _url, _email, _forwhom,
_amenities, _bedrooms, _beds, _rent, _deposit, _desc, _mapLocation, _city, _addedBy, _furnished, _possession);

select hostid into temp from hostel where hostid=(select max(hostid) from hostel);
set _hostid=temp;
end if;

if(_q='2') then
update hostel set hostname=_hostName, hostnamehindi=_hostNameHindi, hostarea=_hostArea, hostareasqft=_hostAreaSqft,
address=_address, contact=_contact, websiteurl=_url, email=_email, forwhom=_forwhom, amenities=_amenities, bedrooms=_bedrooms,
beds=_beds, rent=_rent, deposit=_deposit, description=_desc, city=_city, furnished=_furnished, possession = _possession
where hostid=_hostid;
set _hostid=1;
end if;

if(_q='3') then
update hostel set photo=_photo where hostid=_hostid;
set _hostid=1;
end if;

if(_q='4') then
delete from hostel where hallid=_hostid;
set _hostid=1;
end if;
commit;
END $$

DELIMITER ;